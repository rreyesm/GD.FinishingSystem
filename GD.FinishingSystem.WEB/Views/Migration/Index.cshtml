@using GD.FinishingSystem.Entities.ViewModels
@model GD.FinishingSystem.WEB.Classes.IndexModelMigration
@{
    var styleList = ViewBag.StyleList;
    var positionRuloMigrationId = ViewBag.PositionRuloMigrationId;
    var locationList = ViewBag.LocationList;
    var areaID = ViewBag.AreaID;
}

<h1 class="mt-4">Tela Cruda</h1>

@if (User.IsInRole("RuloMigration", AuthType.Add))
{
    @if (areaID == (int)AreaType.Tejido || areaID == (int)AreaType.Desarrollos)
    {
        <p>
            <a asp-action="Create" class="btn btn-sm btn-outline-light border-dark btn-dark">
                <i class="lni lni-circle-plus"></i> Crear Registro de Tela Cruda
            </a>
        </p>
    }

}

<form asp-action="Index" method="post" id="formFilters">

    <div class="row">
        <div class="col-md-2">
            <div class="form-group">
                <label for="dtBegin">Inicio</label><br>
                <input type="datetime-local" style="width:100% !important;" id="dtBegin" name="dtBegin">
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="dtEnd">Fin</label><br>
                <input type="datetime-local" style="width:100% !important;" id="dtEnd" name="dtEnd">
                @*                <div style="width:100% !important;">
                <label><input type="radio" id="RealDate" name="EndDateType" onclick="changeDate(1);" value="Real Date" checked /> Real Date</label>
                <label><input type="radio" id="AccountingDate" name="EndDateType" onclick="changeDate(2);" value="Accounting Date" /> Accounting Date</label>
                </div>*@
                <input type="hidden" id="isAccountingDate" name="isAccountingDate" />
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="numLote">Lote</label><br>
                <input numLote type="number" onfocusout="controlForSmallerThanZero('numLote')" min="0" style="width:100% !important;" id="numLote" name="numLote">
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="numBeam">Julio</label><br>
                <input type="number" onfocusout="controlForSmallerThanZero('numBeam')" min="0" style="width:100% !important;" id="numBeam" name="numBeam">
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="numLoom">Telar</label><br>
                <input type="number" onfocusout="controlForSmallerThanZero('numLoom')" min="0" style="width:100% !important;" id="numLoom" name="numLoom">
            </div>
        </div>

        <div class="col-md-2">
            <div class="form-group">
                <label for="txtStyle">Estilo</label><br>
                <input type="text" style="width:100% !important;" id="txtStyle" name="txtStyle" list="styleList">
                <datalist id="styleList">
                    @foreach (var item in styleList)
                    {
                        <option value="@item"></option>
                    }
                </datalist>
            </div>
        </div>
    </div>

    @*SECOND ROW*@
    <div class="row">
        <div class="col-md-2">
            <div class="form-group">
                <label for="numMigrationCategory">Status</label><br>
                <select style="width:100% !important;" id="numMigrationCategory" name="numMigrationCategory" asp-items="@ViewBag.MigrationCategoryList"></select>
            </div>
        </div>

        <div class="col-md-2">
            <div class="form-group">
                <label for="txtLocation">Ubicación</label><br />
                <input type="text" style="width:100% !important;" id="txtLocation" name="txtLocation" list="locationList" />
                <datalist id="locationList">
                    @foreach (var item in locationList)
                    {
                        <option value="@item"></option>
                    }
                </datalist>
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="numRuloMigrationID">ID de Crudo</label>
                <input type="number" onfocus="controlForSmallerThanZero('numRuloMigrationID')" min="0" style="width: 100% !important" id="numRuloMigrationID" name="numRuloMigrationID" />
            </div>
        </diV>
        <div class="col-md-2">
            <div class="form-group">
                <label for="numPackingListID">Packing List</label>
                <input type="number" onfocus="controlForSmallerThanZero('numPackingListID')" min="0" style="width: 100% !important" id="numPackingListID" name="numPackingListID" />
            </div>
        </diV>

    </div>

    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-12" style="text-align:right">
            <button onclick="setIndex();" type="submit" class="btn btn-sm btn-outline-info"><i class="lni lni-search"></i> Filtrar</button>
            <a onclick="clearFilters();" class="btn btn-sm btn-outline-info"><i class="lni lni-brush"></i> Limpiar Filtros</a>
        </div>
    </div>

</form>

<div class="col-12">
    @if ((bool)ViewBag.Error)
    {
        <hr />
        <div class="alert alert-danger">
            @Html.Raw(ViewBag.ErrorMessage)
        </div>

    }
    @if ((bool)ViewBag.Ok)
    {
        <div class="alert alert-success">
            @Html.Raw(ViewBag.OkMessage)
        </div>
    }

</div>

@if (User.IsInRole("Authorize", AuthType.Full))
{
    <form asp-controller="Migration" asp-action="UploadFile" method="post"
          enctype="multipart/form-data">
        @Html.AntiForgeryToken()
        <div class="container">
            <div class="row d-flex justify-content-center">
                <div class="col-sm-8">
                    <div class="form-group">
                        <div class="input-group">
                            <input type="text" class="form-control" readonly>
                            <div class="input-group-btn">
                                <span class="fileUpload btn btn-info">
                                    <span class="upl" id="upload">Select Excel File</span>
                                    <input type="file" accept=".xls, .xlsx" class="upload up" id="up" name="formFile" onchange="readURL(this);" />
                                </span>
                            </div><!-- btn -->
                            @Html.Raw(" ")
                            <button type="submit" class="btn btn-sm btn-success"><i class="lni lni-cloud-upload"></i> Upload from Excel</button>

                        </div><!-- group -->
                    </div><!-- form-group -->
                </div>
            </div>
        </div>

    </form>
}


<table class="table table-sm table-hover table-responsive-lg">
    <thead>
        <tr>
            <th colspan="19">
                <div>
                    Lista de Tela Cruda
                    @*<a onclick="exportToExcel();" class="btn btn-sm btn-success"><i class="far fa-file-excel"></i> Raw Fabric Stock</a>*@

                    @*                    @if (User.IsInRole("Authorize", AuthType.Full))
                    {
                    <a onclick="exportToExcelAllStock();" class="btn btn-sm btn-danger"><i class="far fa-file-excel"></i> Export All Stock</a>
                    }*@
                </div>
            </th>
        </tr>
        <tr>
            <th>
                <i class="lni lni-line-dashed"></i>
            </th>
            @if (areaID == (int)AreaType.Acabado)
            {
            <th></th>
            }
            <th></th>
            @if (areaID == (int)AreaType.Desarrollos || areaID == (int)AreaType.Acabado)
            {
                <th></th>
            }
            @if (areaID == (int)AreaType.Acabado && (User.IsInRole("TransferToFinishing", AuthType.Full) || User.IsInRole("TransferToFinishing", AuthType.Update)))
            {
                <th></th>
            }
            @* <th></th> *@
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].RuloID)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Date)
            </th>
            @if (areaID == (int)AreaType.Acabado)
            {
                <th>Selec. para Rulo</th>
            }
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Lote)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Beam)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].BeamStop)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Loom)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].IsToyotaText)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Style)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].StyleName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].PieceNo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Meters)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].SizingMeters)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].NextMachine)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].PieceBetilla)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].MigrationCategoryID)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].WeavingShift)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].PackingListID)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Location)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Observations)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.RuloMigrationList)
        {
            var color = "bgcolor=transparent";
            if (item.RuloID != null && item.RuloID != 0)
                color = "bgcolor=66ff66"; //Verde
            else if (item.RuloID == null && item.WarehouseCategoryID != null && item.WarehouseCategoryID != 8 && item.WarehouseCategoryID != 9) //Deafult 8 = W1
            {
                if (item.FabricAdvance)
                    color = "bgcolor=f7dc6f";
                else
                    color = "bgcolor=ffc300"; //Amarillo
            }
            else if (item.WarehouseCategoryID == 9)
                color = "bgcolor=ff6666"; //Rojo

            <tr @color id="@("row" + @item.RuloMigrationID)">
                <td>
                    <span style="font-weight:bold">
                        @Html.DisplayFor(modelItem => item.RuloMigrationID)
                    </span>
                </td>

                @if (areaID == (int)AreaType.Acabado)
                {
                    <td>
                        <div style="display:block;width:90px">
                            @if (User.IsInRole("Rulo", AuthType.Add))
                            {
                                if ((item.WarehouseCategoryID == 1 || item.WarehouseCategoryID == 2) && item.RuloID == null || item.RuloID == 0)
                                {
                                    <a id="@("rulo"+@item.RuloMigrationID)" onclick="validateCreateRulo(@item.Lote, @item.RuloMigrationID)" class="btn input-xs btn-dark">
                                        <i class="lni lni-circle-plus"></i> Crear Rulo
                                    </a>
                                }
                            }
                        </div>
                    </td>
                }

                <td>
                    <div style="display:block;width:135px;">
                        @if (areaID == (int)AreaType.Tejido && item.WarehouseCategoryID == 9)
                        {   
                            <a href="#" onclick="changeRejection(@item.RuloMigrationID)" class="btn input-xs btn-danger">
                                <i class="lni lni-checkmark-circle"></i>
                            </a>
                        }   

                        <a href="#" onclick="printRawLabel(@areaID, @item.RuloMigrationID)" data-toggle="modal" data-target="#modalDialog"><i class="lni lni-printer"></i></a>
                        @Html.Raw(" | ")
                        @if (User.IsInRole("RuloMigration", AuthType.Update))
                        {
                            <a asp-action="Edit" asp-route-rulomigrationid="@item.RuloMigrationID">
                                <i class="lni lni-slice"></i>
                            </a>
                        }
                        @if (User.IsInRole("RuloMigration", AuthType.Show))
                        {
                            if (User.IsInRole("RuloMigration", AuthType.Update))
                                @Html.Raw(" | ")

                            <a asp-action="Details" asp-route-rulomigrationid="@item.RuloMigrationID">
                                <i class="lni lni-question-circle"></i>
                            </a>
                        }
                        @if (User.IsInRole("RuloMigration", AuthType.Delete))
                        {
                            @if (areaID == (int)AreaType.Tejido || areaID == (int)AreaType.Desarrollos)
                            {
                                if (User.IsInRole("RuloMigration", AuthType.Show))
                                    @Html.Raw(" | ")

                                <a asp-action="Delete" asp-route-rulomigrationid="@item.RuloMigrationID">
                                    <i class="lni lni-circle-minus"></i>
                                </a>
                            }
                        }
                    </div>
                </td>

                @if (areaID == (int)AreaType.Desarrollos || areaID == (int)AreaType.Acabado)
                {
                    <td>
                        <div style="display:block;width:100px">
                            @if (User.IsInRole("RuloMigration", AuthType.Add))
                            {
                                if ((item.WarehouseCategoryID == 1 || item.WarehouseCategoryID == 2) && item.RuloID == null || item.RuloID == 0)  //Se agregó validación porque los de acabado podían hacer un adelanto aún cuando no estaba en su area
                                {
                                    <a id="@("rulo"+@item.RuloMigrationID)" onclick="createFactoryAdvance(@item.RuloMigrationID)" class="btn input-xs btn-dark">
                                        Crear Adelanto
                                    </a>
                                }
                            }
                        </div>
                    </td>
                }

@*                 @if (areaID == (int)AreaType.Acabado)
                {
                    <td>
                        <div style="text-align:center;display:block;width:100px">
                            @if (User.IsInRole("Rulo", AuthType.Add))
                            {
                                if ((item.WarehouseCategoryID == 1 || item.WarehouseCategoryID == 2) && item.RuloID == null || item.RuloID == 0) //Se agregó validación porque los de acabado podían hacer un adelanto aún cuando no estaba en su area
                                {
                                    <input type="checkbox" onclick="markForAdvanceFabric(@item.RuloMigrationID)" id='@Html.Raw("mark"+@item.RuloMigrationID)' @Html.Raw(@item.FabricAdvance ? "checked='checked'" : "") />
                                    <label class="form-check-label" for='@Html.Raw("mark"+@item.RuloMigrationID)'>Marcar Adelanto Completo</label>
                                }
                            }
                        </div>
                    </td>
                } *@
                @if (areaID == (int)AreaType.Acabado && (User.IsInRole("TransferToFinishing", AuthType.Full) || User.IsInRole("TransferToFinishing", AuthType.Update)))
                {
                    <td>
                        <div style="display:block;width:15px">
                            @if (areaID == (int)AreaType.Acabado && item.WarehouseCategoryID == 8)
                            {
                                <a id="@("rulo"+@item.RuloMigrationID)" onclick="transferFromWeavingToFinishing(@item.RuloMigrationID)" class="btn input-xs btn-danger">
                                    <i class="lni lni-checkmark-circle"></i>
                                </a>
                            }
                        </div>
                    </td>
                }
                <td>
                    @Html.DisplayFor(modelItem => item.RuloID)
                </td>
                <td>
                    <div style="display:block;width:95px;">
                        @Html.Raw(item.Date.ToString("yyyy-MM-dd"))
                    </div>
                </td>
                @if (areaID == (int)AreaType.Acabado)
                {
                    <td>
                        <div style="display:block;width:15px">
                            @if ((item.WarehouseCategoryID == 1 || item.WarehouseCategoryID == 2) && item.RuloID == null || item.RuloID == 0)
                            {
                                <input class="form-check" type="checkbox" id='@Html.Raw("forRulo"+@item.RuloMigrationID)' />
                            }
                        </div>
                    </td>
                }
                <td>
                    @Html.DisplayFor(modelItem => item.Lote)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Beam)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BeamStop)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Loom)
                </td>
                <td>
                    <div style="display:block;width:75px;">
                        @Html.DisplayFor(modelItem => item.IsToyotaText)
                    </div>
                </td>
                <td>
                    <div style="display:block;width:95px;">
                        @Html.DisplayFor(modelItem => item.Style)
                    </div>
                </td>
                <td>
                    <div style="display:block;width:260px;">
                        @Html.DisplayFor(modelItem => item.StyleName)
                    </div>
                </td>
                <td>
                    <div style="display:block;width:75px;">
                        @Html.DisplayFor(modelItem => item.PieceNo)
                    </div>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Meters)
                </td>
                <td>
                    <div style="display:block;width:135px;">
                        @Html.DisplayFor(modelItem => item.SizingMeters)
                    </div>
                </td>
                <td>
                    <div style="display:block;width:100;">
                        @Html.DisplayFor(modelItem => item.NextMachine)
                    </div>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PieceBetilla)
                </td>
                <td>
                    <div style="display:block;width:90px;">
                        @Html.Raw(item.MigrationCategory?.Name)
                    </div>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.WeavingShift)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PackingListID)
                </td>
                <td>
                    <div style="display:block;width:70px;">
                        @Html.DisplayFor(modelItem => item.Location.Name)
                    </div>
                </td>
                <td>
                    <div style="display:block;width:260px;">
                        @Html.DisplayFor(modelItem => item.Observations)
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.RuloMigrationList.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.RuloMigrationList.HasNextPage ? "disabled" : "";
}

<div>
    <a asp-action="Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="1"
       asp-route-currentFilter="@System.Text.Json.JsonSerializer.Serialize(Model.CurrentVMRuloFilters)"
       class="btn btn-primary btn-sm @prevDisabled">
        <i class="lni lni-backward"></i> First
    </a>
    <a asp-action="Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.RuloMigrationList.PageIndex - 1)"
       asp-route-currentFilter="@System.Text.Json.JsonSerializer.Serialize(Model.CurrentVMRuloFilters)"
       class="btn btn-primary btn-sm @prevDisabled">
        <i class="lni lni-chevron-left"></i> Previous
    </a>
    <a asp-action="Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.RuloMigrationList.PageIndex + 1)"
       asp-route-currentFilter="@System.Text.Json.JsonSerializer.Serialize(Model.CurrentVMRuloFilters)"
       class="btn btn-primary btn-sm @nextDisabled">
        Next <i class="lni lni-chevron-right "></i>
    </a>
    <a asp-action="Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.RuloMigrationList.TotalPages)"
       asp-route-currentFilter="@System.Text.Json.JsonSerializer.Serialize(Model.CurrentVMRuloFilters)"
       class="btn btn-primary btn-sm @nextDisabled">
        Last <i class="lni lni-forward"></i>
    </a>

    <span style="font-weight: bold">
        Pag.: @(Model.RuloMigrationList.PageIndex) of @(Model.RuloMigrationList.TotalPages)
    </span>

</div>

<div class="modal fade" id="modalDialog" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        @*modal-lg*@
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Label</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="objModal"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(document).on('change', '.up', function () {
            var names = [];
            var length = $(this).get(0).files.length;
            for (var i = 0; i < $(this).get(0).files.length; ++i) {
                names.push($(this).get(0).files[i].name);
            }
            // $("input[name=file]").val(names);
            if (length > 2) {
                var fileName = names.join(', ');
                $(this).closest('.form-group').find('.form-control').attr("value", length + " files selected");
            }
            else {
                $(this).closest('.form-group').find('.form-control').attr("value", names);
            }
        });

        $(document).ready(function () {

            var position = '@positionRuloMigrationId';
            if (!isNaN(position) && position > 0) {
                var element = document.getElementById("row" + position);
                element.scrollIntoView({ block: "end", behavior: "smooth" });
            }

        });
    </script>
}

<script>
    document.getElementById("dtBegin").value = '@ViewBag.dtBegin.ToString()';
    document.getElementById("dtEnd").value = '@ViewBag.dtEnd.ToString()';
    document.getElementById("isAccountingDate").value = '@ViewBag.isAccountingDate';

    var isAccountValue = '@ViewBag.isAccountingDate' == 'True' ? true : false;
    document.getElementById("RealDate").checked = !isAccountValue;
    document.getElementById("AccountingDate").checked = isAccountValue;

    document.getElementById("numLote").value = '@ViewBag.numLote';
    document.getElementById("numBeam").value = '@ViewBag.numBeam';
    document.getElementById("numLoom").value = '@ViewBag.numLoom';
    document.getElementById("txtStyle").value = '@ViewBag.txtStyle';
    document.getElementById("numMigrationCategory").value = '@ViewBag.numMigrationCategory';
    document.getElementById("txtLocation").value = '@ViewBag.txtLocation';
    document.getElementById("numRuloMigrationID").value = '@ViewBag.numRuloMigrationID';
    document.getElementById("numPackingListID").value = '@ViewBag.numPackingListID';

    function changeDate(option) {
        if (option == 1) {
            document.getElementById("dtBegin").value = '@ViewBag.realBeginDate.ToString()';
            document.getElementById("dtEnd").value = '@ViewBag.realDate.ToString()';
            document.getElementById("isAccountingDate").value = false;
        }
        else if (option == 2) {
            document.getElementById("dtBegin").value = '@ViewBag.accountingBeginDate.ToString()';
            document.getElementById("dtEnd").value = '@ViewBag.accountingDate.ToString()';
            document.getElementById("isAccountingDate").value = true;
        }
    }

    function setIndex() {
        document.getElementById("formFilters").action = "/Migration/Index";
        document.getElementById("formFilters").submit();
    }

    function exportToExcel() {

        document.getElementById("formFilters").action = "/Migration/ExportToExcel";
        document.getElementById("formFilters").submit();
    }

    function exportToExcelAllStock() {
        document.getElementById("formFilters").action = "/Migration/ExportToExcelAllStock";
        document.getElementById("formFilters").submit();
    }

    function clearFilters() {
        document.getElementById("numLote").value = 0;
        document.getElementById("numBeam").value = 0;
        document.getElementById("numLoom").value = 0;
        document.getElementById("txtStyle").value = '';
        document.getElementById("numMigrationCategory").value = 0;
        document.getElementById("txtLocation").value = '';

        document.getElementById("formFilters").action = "/Migration/Index";
        document.getElementById("formFilters").submit();

    }

    function validateCreateRulo(lote, ruloMigrationId) {
        elements = document.getElementsByClassName("form-check");
        var raws = new Array(elements.length)
        for (var i = 0; i < elements.length; i++) { 
            if (elements[i].checked){
                raws[i] = elements[i].id.replace('forRulo', '')
            }
        }

        $.ajax({
            url: "/Migration/ValidateCreateRulo",
            type: "POST",
            data: {
                'rawList': raws,
                lote: lote
            },
            success: function (data) {
                if (data) {
                    if (data.errorMessage == "") {
                        location.href = "/Migration/CreateRulo?rawsIDs=" + data.rawsIDs;
                    }
                    else
                        alert(data.errorMessage);
                }
                else
                    alert("Something went wrong!");
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("404 Not found!");
            }
        });
    }

    function validateCreateRuloAnterior(lote, ruloMigrationId) {

         $.ajax({
            url: "/Migration/ValidateCreateRulo",
            type: "GET",
            data: {
                ruloMigrationID: ruloMigrationId,
                lote: lote
            },
            success: function (data) {
                if (data) {
                    if (data.errorMessage == "") {
                        location.href = "/Migration/CreateRulo?ruloMigrationId=" + ruloMigrationId;
                    }
                    else
                        alert(data.errorMessage);
                }
                else
                    alert("Something went wrong!");
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("404 Not found!");
            }
        });

    }

    function validateCreateRulo2(lote, ruloMigrationId) {
                elements = document.getElementsByClassName("form-check");
        var raws = new Array(elements.length)
        for (var i = 0; i < elements.length; i++) { 
            if (elements[i].checked){
                raws[i] = elements[i].id.replace('forRulo', '')
            }
        }

        $.ajax({
            type: "POST",
            url: "/Migration/ValidateCreateRuloFromCheckBox",
            data: { 'rawList': raws },
            success: function (data){
                if (data.errorMessage != "") {
                    alert(data.errorMessage);
                }
                else{
                        $.ajax({
                        url: "/Migration/ValidateCreateRulo",
                        type: "GET",
                        data: {
                            ruloMigrationID: ruloMigrationId,
                            lote: lote
                        },
                        success: function (data) {
                            if (data) {
                                if (data.errorMessage == "") {
                                    location.href = "/Migration/CreateRulo?ruloMigrationId=" + ruloMigrationId;
                                }
                                else
                                    alert(data.errorMessage);
                            }
                            else
                                alert("Something went wrong!");
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert("404 Not found!");
                        }
                    });
                }
            },
            error: function (xhr, ajaxOptions, throwError){
                alert("404 Not found");
            }
        })

    }

    function createFactoryAdvance(ruloMigrationId) {

        var meter = parseFloat(prompt("Por favor introduzca los metros del Adelanto de Tela", "0"))
        if (isNaN(meter) || meter <= 0) return;

        if (confirm('Estas seguro del total de metros introducidos: ' + meter)) {
            $.ajax({
                url: "/Migration/CreateFactoryAdvance",
                type: "POST",
                data: {
                    ruloMigrationID: ruloMigrationId,
                    meter: meter
                },
                success: function (data) {
                    if (data) {
                        if (data.errorMessage == "") {
                            document.getElementById("numLote").value = data.lote;
                            document.getElementById("numBeam").value = data.beam;
                            setIndex();
                        }
                        else
                            alert(data.errorMessage);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("404 Not found!");
                }

            })
        }


    }

    function printRawLabel(areaId, ruloMigrationId) {
        if (confirm('¿Estás seguro de querer imprimir esta etiqueta?')) {
            $.ajax({
                url: "/Migration/ShowPrintLabel",
                type: "GET",
                data:
                {
                    areaId: areaId,
                    ruloMigrationId: ruloMigrationId,
                },
                success: function (data) {
                    document.getElementById('objModal').innerHTML = data;
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("Something went wrong!");
                }
            });
        }
    }

    function transferFromWeavingToFinishing(ruloMigrationId) {
        if (confirm("¿Estás seguro de transferir de Tejido a Acabado")) {
            $.ajax({
                url: "/Migration/TransferFromWeavingToFinishing",
                type: "GET",
                data: {
                    ruloMigrationId: ruloMigrationId
                },
                success: function (data) {
                    location.href = "/Migration";
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("404 Not found!");
                }
            })
        }
    }

@*     function markForAdvanceFabric(ruloMigrationId) {
        if (confirm("¿Estás seguro de querer marcar como adelanto el rollo completo?")) {
            $.ajax({
                url: "/Migration/MarkForAdvanceFabric",
                type: "GET",
                data: {
                    ruloMigrationId: ruloMigrationId
                },
                success: function (data) {
                    location.href = "/Migration";
                },
                error: function (xhr, ajaxOptions, throwError) {
                    alert("404 Not fount!");
                }
            })
        }
        else {
            document.getElementById("mark" + ruloMigrationId).checked = !document.getElementById("mark" + ruloMigrationId).checked;
        }
    } *@

    function changeRejection(ruloMigrationId) {
        if (confirm("¿Estas seguro de que el rechazo ya fue corregido?")) {
            $.ajax({
                url: "/Migration/ChangeRejection",
                type: "GET",
                data: {
                    ruloMigrationId: ruloMigrationId
                },
                success: function (data){
                    location.href = "/Migration";
                },
                error: function (xhr, ajaxOptions, throwError){
                    alert("404 Not found");
                }
            })
        }
    }

    function controlForSmallerThanZero(controlID) {
        try {
            var value = document.getElementById(controlID).value;
            var a = parseInt(value);
            if (!(a > 0)) document.getElementById(controlID).value = "0";
        }
        catch (err) {
            document.getElementById(controlID).value = "0";
        }
    }

@*     function validateCreateRuloFromCheckBox() { 
        elements = document.getElementsByClassName("form-check");
        const raws = new Array(elements.length)
        for (var i = 0; i < elements.length; i++) { 
            if (elements[i].checked){
                raws[i] = elements[i].id.replace('forRulo', '')
            }
        }

        $.ajax({
            type: "POST"
            url: "/Migration/ValidateCreateRuloFromCheckBox",
            data: {
                rawList: raws 
            },
            success: function (data){
                if (data.errorMessage != "") {
                    alert(errorMessage);
                }
            },
            error: function (xhr, ajaxOptions, throwError){
                alert("404 Not found");
            }
        })
    } *@

</script>
