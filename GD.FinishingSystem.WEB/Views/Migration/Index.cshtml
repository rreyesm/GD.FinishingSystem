@model GD.FinishingSystem.WEB.Classes.IndexModelMigration
@{
    var styleList = ViewBag.StyleList;
    var positionRuloMigrationId = ViewBag.PositionRuloMigrationId;
}

<h1 class="mt-4">Rulos Raw</h1>

@if (User.IsInRole("RuloMigration", AuthType.Add))
{
    <p>
        <a asp-action="Create" class="btn btn-sm btn-outline-light border-dark btn-dark">
            <i class="lni lni-circle-plus"></i> Create New
        </a>
    </p>
}

<form asp-action="Index" method="post" id="formFilters">

    <div class="row">
        <div class="col-md-2">
            <div class="form-group">
                <label for="dtBegin">Begin</label><br>
                <input type="date" style="width:100% !important;" id="dtBegin" name="dtBegin">
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="dtEnd">End</label><br>
                <input type="date" style="width:100% !important;" id="dtEnd" name="dtEnd">
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="numLote">Lote</label><br>
                <input numLote type="number" onfocusout="controlForSmallerThanZero('numLote')" min="0" style="width:100% !important;" id="numLote" name="numLote">
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="numBeam">Beam</label><br>
                <input type="number" onfocusout="controlForSmallerThanZero('numBeam')" min="0" style="width:100% !important;" id="numBeam" name="numBeam">
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="numLoom">Loom</label><br>
                <input type="number" onfocusout="controlForSmallerThanZero('numLoom')" min="0" style="width:100% !important;" id="numLoom" name="numLoom">
            </div>
        </div>

        <div class="col-md-2">
            <div class="form-group">
                <label for="txtStyle">Style</label><br>
                <input type="text" style="width:100% !important;" id="txtStyle" name="txtStyle" list="styleList">
                <datalist id="styleList">
                    @foreach (var item in styleList)
                    {
                        <option value="@item"></option>
                    }
                </datalist>
            </div>
        </div>
    </div>

    @*SECOND ROW*@
    <div class="row">
        <div class="col-md-2">
            <div class="form-group">
                <label for="numMigrationCategory">Status</label><br>
                <select style="width:100% !important;" id="numMigrationCategory" name="numMigrationCategory" asp-items="@ViewBag.MigrationCategoryList"></select>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-12" style="text-align:right">
            <button onclick="setIndex();" type="submit" class="btn btn-sm btn-outline-info"><i class="lni lni-search"></i> Filter</button>
            <a onclick="clearFilters();" class="btn btn-sm btn-outline-info"><i class="lni lni-brush"></i> Clear Filters</a>
        </div>
    </div>

</form>

<div class="col-12">
    @if ((bool)ViewBag.Error)
    {
        <hr />
        <div class="alert alert-danger">
            @Html.Raw(ViewBag.ErrorMessage)
        </div>

    }
    @if ((bool)ViewBag.Ok)
    {
        <div class="alert alert-success">
            @Html.Raw(ViewBag.OkMessage)
        </div>

    }

</div>

@if (User.IsInRole("Authorize", AuthType.Full))
{
    <form asp-controller="Migration" asp-action="UploadFile" method="post"
          enctype="multipart/form-data">
        @Html.AntiForgeryToken()
        <div class="container">
            <div class="row d-flex justify-content-center">
                <div class="col-sm-8">
                    <div class="form-group">
                        <div class="input-group">
                            <input type="text" class="form-control" readonly>
                            <div class="input-group-btn">
                                <span class="fileUpload btn btn-info">
                                    <span class="upl" id="upload">Select Excel File</span>
                                    <input type="file" accept=".xls, .xlsx" class="upload up" id="up" name="formFile" onchange="readURL(this);" />
                                </span>
                            </div><!-- btn -->
                            @Html.Raw(" ")
                            <button type="submit" class="btn btn-sm btn-success"><i class="lni lni-cloud-upload"></i> Upload from Excel</button>

                        </div><!-- group -->
                    </div><!-- form-group -->
                </div>
            </div>
        </div>

    </form>
}


<table class="table table-sm table-hover table-responsive-lg">
    <thead>
        <tr>
            <th colspan="19">
                <div>
                    Rulo Raw List
                    <a onclick="exportToExcel();" class="btn btn-sm btn-success"><i class="far fa-file-excel"></i> Export to Excel</a>
                    @if (User.IsInRole("Authorize", AuthType.Full))
                    {
                        <a onclick="exportToExcelAllStock();" class="btn btn-sm btn-danger"><i class="far fa-file-excel"></i> Export All Stock</a>
                    }
                </div>
            </th>
        </tr>
        <tr>
            <th>
                <i class="lni lni-line-dashed"></i>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Date)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Style)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].StyleName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].NextMachine)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Lote)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Stop)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Beam)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].IsToyota)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Loom)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].PieceNo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].PieceBetilla)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Meters)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].GummedMeters)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].MigrationCategoryID)
            </th>
            <th></th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Shift)
            </th>
            <th></th>
            <th>
                @Html.DisplayNameFor(model => model.RuloMigrationList[0].Observations)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.RuloMigrationList)
        {
            var color = "bgcolor=transparent";
            if (item.RuloID != null && item.RuloID != 0)
                color = "bgcolor=66ff66";

            <tr @color id="@("row"+@item.RuloMigrationID)">
                <td>
                    @Html.DisplayFor(modelItem => item.RuloMigrationID)
                </td>
                <td>
                    <div style="display:block;width:95px;">
                        @Html.Raw(item.Date.ToString("yyyy-MM-dd"))
                    </div>
                </td>
                <td>
                    <div style="display:block;width:95px;">
                        @Html.DisplayFor(modelItem => item.Style)
                    </div>
                </td>
                <td>
                    <div style="display:block;width:260px;">
                        @Html.DisplayFor(modelItem => item.StyleName)
                    </div>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NextMachine)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Lote)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Stop)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Beam)
                </td>
                <td>
                    <div style="display:block;width:75px;">
                        @Html.DisplayFor(modelItem => item.IsToyota)
                    </div>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Loom)
                </td>
                <td>
                    <div style="display:block;width:75px;">
                        @Html.DisplayFor(modelItem => item.PieceNo)
                    </div>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PieceBetilla)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Meters)
                </td>
                <td>
                    <div style="display:block;width:135px;">
                        @Html.DisplayFor(modelItem => item.GummedMeters)
                    </div>
                </td>
                <td>
                    <div style="display:block;width:90px;">
                        @Html.Raw(item.MigrationCategory?.Name)
                    </div>
                </td>
                <td>
                    <div style="display:block;width:90px">
                        @if (User.IsInRole("Rulo", AuthType.Add))
                        {
                            if (item.RuloID == null || item.RuloID == 0)
                            {

                                <a id="@("rulo"+@item.RuloMigrationID)" onclick="validateCreateRulo(@item.Lote, @item.RuloMigrationID)" class="btn input-xs btn-dark">
                                    <i class="lni lni-circle-plus"></i> Create Rulo
                                </a>
                            }
                        }
                    </div>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Shift)
                </td>

                <td>
                    <div style="display:block;width:75px;">
                        @if (User.IsInRole("RuloMigration", AuthType.Update))
                        {
                            <a asp-action="Edit" asp-route-rulomigrationid="@item.RuloMigrationID">
                                <i class="lni lni-slice"></i>
                            </a>
                        }
                        @if (User.IsInRole("RuloMigration", AuthType.Show))
                        {
                            if (User.IsInRole("RuloMigration", AuthType.Update))
                                @Html.Raw(" | ")

                                <a asp-action="Details" asp-route-rulomigrationid="@item.RuloMigrationID">
                                    <i class="lni lni-question-circle"></i>
                                </a>
                            }
                        @if (User.IsInRole("RuloMigration", AuthType.Delete))
                        {
                            if (User.IsInRole("RuloMigration", AuthType.Show))
                                @Html.Raw(" | ")

                                <a asp-action="Delete" asp-route-rulomigrationid="@item.RuloMigrationID">
                                    <i class="lni lni-circle-minus"></i>
                                </a>
                            }
                    </div>
                </td>
                <td>
                    <div style="display:block;width:260px;">
                        @Html.DisplayFor(modelItem => item.Observations)
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.RuloMigrationList.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.RuloMigrationList.HasNextPage ? "disabled" : "";
}

<div>
    <a asp-action="Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="1"
       asp-route-currentFilter="@System.Text.Json.JsonSerializer.Serialize(Model.CurrentVMRuloFilters)"
       class="btn btn-primary btn-sm @prevDisabled">
        <i class="lni lni-backward"></i> First
    </a>
    <a asp-action="Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.RuloMigrationList.PageIndex - 1)"
       asp-route-currentFilter="@System.Text.Json.JsonSerializer.Serialize(Model.CurrentVMRuloFilters)"
       class="btn btn-primary btn-sm @prevDisabled">
        <i class="lni lni-chevron-left"></i> Previous
    </a>
    <a asp-action="Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.RuloMigrationList.PageIndex + 1)"
       asp-route-currentFilter="@System.Text.Json.JsonSerializer.Serialize(Model.CurrentVMRuloFilters)"
       class="btn btn-primary btn-sm @nextDisabled">
        Next <i class="lni lni-chevron-right "></i>
    </a>
    <a asp-action="Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.RuloMigrationList.TotalPages)"
       asp-route-currentFilter="@System.Text.Json.JsonSerializer.Serialize(Model.CurrentVMRuloFilters)"
       class="btn btn-primary btn-sm @nextDisabled">
        Last <i class="lni lni-forward"></i>
    </a>

    <span style="font-weight: bold">
        Pag.: @(Model.RuloMigrationList.PageIndex) of @(Model.RuloMigrationList.TotalPages)
    </span>
</div>

@section scripts{
    <script>
            $(document).on('change', '.up', function () {
                var names = [];
                var length = $(this).get(0).files.length;
                for (var i = 0; i < $(this).get(0).files.length; ++i) {
                    names.push($(this).get(0).files[i].name);
                }
                // $("input[name=file]").val(names);
                if (length > 2) {
                    var fileName = names.join(', ');
                    $(this).closest('.form-group').find('.form-control').attr("value", length + " files selected");
                }
                else {
                    $(this).closest('.form-group').find('.form-control').attr("value", names);
                }
            });

            $(document).ready(function () {

                var position = '@positionRuloMigrationId';
                if (!isNaN(position) && position > 0) {
                var element = document.getElementById("row" + position);
                element.scrollIntoView({ block: "end", behavior: "smooth" });
                }

            });
    </script>
}

<script>
    document.getElementById("dtBegin").value = '@ViewBag.dtBegin.ToString()';
    document.getElementById("dtEnd").value = '@ViewBag.dtEnd.ToString()';
    document.getElementById("numLote").value = '@ViewBag.numLote';
    document.getElementById("numBeam").value = '@ViewBag.numBeam';
    document.getElementById("numLoom").value = '@ViewBag.numLoom';
    document.getElementById("txtStyle").value = '@ViewBag.txtStyle';
    document.getElementById("numMigrationCategory").value = '@ViewBag.numMigrationCategory';

    function setIndex() {
        document.getElementById("formFilters").action = "/RuloMigration/Index";
        document.getElementById("formFilters").submit();
    }

    function exportToExcel() {

        document.getElementById("formFilters").action = "/RuloMigration/ExportToExcel";
        document.getElementById("formFilters").submit();
    }

    function exportToExcelAllStock() {
        document.getElementById("formFilters").action = "/RuloMigration/ExportToExcelAllStock";
        document.getElementById("formFilters").submit();
    }

    function clearFilters() {
        document.getElementById("numLote").value = 0;
        document.getElementById("numBeam").value = 0;
        document.getElementById("numLoom").value = 0;
        document.getElementById("txtStyle").value = '';
        document.getElementById("numMigrationCategory").value = 0;

        document.getElementById("formFilters").action = "/RuloMigration/Index";
        document.getElementById("formFilters").submit();
    }

    function validateCreateRulo(lote, ruloMigrationId) {
        $.ajax({
            url: "/RuloMigration/ValidateCreateRulo",
            type: "GET",
            data: {
                lote: lote
            },
            success: function (data) {
                if (data) {
                    if (data.errorMessage == "") {
                        location.href = "/RuloMigration/CreateRulo?ruloMigrationId=" + ruloMigrationId;
                    }
                    else
                        alert(data.errorMessage);
                }
                else
                    alert("Something went wrong!")
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("404 Not found!");
            }
        });
    }
</script>
