@*@model IEnumerable<GD.FinishingSystem.Entities.ViewModels.VMRulo>*@
@model GD.FinishingSystem.WEB.Classes.IndexModelRulo

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var styleList = ViewBag.StyleList;
    var role = User.IsInRole("RuloFull") || User.IsInRole("AdminFull") == true ? 1 : 0;
    var positionRuloId = ViewBag.PositionRuloId;

}

<div class="row">
    <h1 class="mt-4">Rulos</h1>
    <h5 id="titleRulos" class="mt-4">@Html.Raw(ViewBag.CurrentPeriod)</h5>
</div>

@if (User.IsInRole("RuloAdd") || User.IsInRole("AdminFull") || User.IsInRole("RuloFull"))
{
<p>
    <a onclick="validateCreateRulo()" class="btn btn-sm btn-outline-light border-dark btn-dark">
        <i class="lni lni-circle-plus"></i> Crear Registro de Reproceso
    </a>

    @*        <a asp-action="Create" class="btn btn-sm btn-outline-light border-dark btn-dark">
            <i class="lni lni-circle-plus"></i> Create New
        </a>*@
</p>
}

<form asp-action="Index" method="post" id="formFilters">


    <div class="row">
        <div class="col-md-2">
            <div class="form-group">
                <label for="dtBegin">Inicio</label><br>
                <input type="datetime-local" style="width:100% !important;" id="dtBegin" name="dtBegin">
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="dtEnd">Fin</label><br>
                <input type="datetime-local" style="width:100% !important;" id="dtEnd" name="dtEnd">
@*              <div style ="width:100% !important;"><label><input type="radio" id="RealDate" name="EndDateType" onclick="changeDate(1);" value="Real Date" checked /> Real Date</label>
                <label><input type="radio" id="AccountingDate" name="EndDateType" onclick="changeDate(2);" value="Accounting Date" /> Accounting Date</label></div>*@
                <input type="hidden" id="isAccountingDate" name="isAccountingDate" />
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="numLote">Lote</label><br>
                <input type="number" onfocusout="controlForSmallerThanZero('numLote')" min="0" style="width:100% !important;" id="numLote" name="numLote">
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="numBeam">Julio</label><br>
                <input type="number" onfocusout="controlForSmallerThanZero('numBeam')" min="0" style="width:100% !important;" id="numBeam" name="numBeam">
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="numLoom">Telar</label><br>
                <input type="number" onfocusout="controlForSmallerThanZero('numLoom')" min="0" style="width:100% !important;" id="numLoom" name="numLoom">
            </div>
        </div>
        @*<div class="col-md-2">
                <div class="form-group">
                    <label for="numPiece">Piece</label><br>
                    <input type="number" onfocusout="controlForSmallerThanZero('numPiece')" min="0" style="width:100% !important;" id="numPiece" name="numPiece">
                </div>
            </div>*@

        <div class="col-md-2">
            <div class="form-group">
                <label for="txtStyle">Estilo</label><br>
                <input type="text" style="width:100% !important;" id="txtStyle" name="txtStyle" list="styleList">
                <datalist id="styleList">
                    @foreach (var item in styleList)
                    {
                    <option value="@item"></option>
                    }
                </datalist>
            </div>
        </div>

    </div>

    @*SECOND ROW*@

    <div class="row">
        <div class="col-md-2">
            <div class="form-group">
                <label for="numTestCategory">Resultado de Pruebas</label><br>
                <select style="width:100% !important;" id="numTestCategory" name="numTestCategory" asp-items="@ViewBag.TestCategorytList"></select>
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="numDefinitionProcess">Máquina</label><br />
                <select style="width:100% !important;" id="numDefinitionProcess" name="numDefinitionProcess" asp-items="@ViewBag.DefinitionProcessList"></select>
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="folioNumber">No. Folio</label><br />
                <input type="number" onfocusout="controlForSmallerThanZero('folioNumber')" min="0" style="width:100% !important;" id="folioNumber" name="folioNumber">
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <label for="numRuloID">ID de Rulo</label>
                <input type="number" onfocus="controlForSmallerThanZero('numRuloID')" min="0" style="width: 100% !important" id="numRuloID" name="numRuloID" />
            </div>
        </diV>
    </div>

    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-12" style="text-align:right">
            <a onclick="setIndex();" class="btn btn-sm btn-outline-info"><i class="lni lni-search"></i> Filtrar</a>
            <a onclick="clearFilters();" class="btn btn-sm btn-outline-info"><i class="lni lni-brush"></i> Limpiar Filtros</a>
        </div>
    </div>

    <input type="hidden" id="withBatches" name="withBatches" />
</form>

<form id="form2">
    <input type="hidden" id="ruloIdPerformance" name="ruloIdPerformance" />
</form>

<table id="tableRulos" class="table table-sm table-hover table-responsive-lg">
    <thead>
        <tr>
            <th colspan="16">
                <div>
                    Lista de Rulos
@*                    @if (User.IsInRole("Authorize", AuthType.Full))
                    {
                        <a onclick="exportToWarehouseStock();" class="btn btn-sm btn-info"><i class="far fa-file-excel"></i> Warehouses Stock</a>
                    }*@

@*                    <a id="btnExportToExcel" onclick="exportToExcel();" class="btn btn-sm btn-success"><i class="far fa-file-excel"></i> Finishing Fabric Detailed Report</a>
                    <Label><input id="chkWithBatchesTmp" type="checkbox" name="chkWithBatchesTmp" onclick="chageWithBatches();" />Report with Batches</Label>
*@
@*                   @if (User.IsInRole("Authorize", AuthType.Full))
                    {
                    <a onclick="exportToExcelAllStock();" class="btn btn-sm btn-danger"><i class="far fa-file-excel"></i> Export All Stock</a>
                    }
                    @if (User.IsInRole("PerformanceTestReport", AuthType.Show) || User.IsInRole("PerformanceTestReport", AuthType.Full) || User.IsInRole("Admin", AuthType.Full))
	                {
                    <a onclick="exportToExcelPerformanceTestReport();" class="btn btn-sm btn-info"><i class="far fa-file-excel"></i> Export Performance Test</a>
	                }*@
                </div>
            </th>
        </tr>
        <tr>
            <th>
                <i class="lni lni-line-dashed"></i>
            </th>

            
            <th>
                Processes
            </th>

            <th></th>


            <th>
                Lote - Beam - Loom
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VMRuloList[0].Style)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VMRuloList[0].StyleName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VMRuloList[0].Machine)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VMRuloList[0].MainOriginCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VMRuloList[0].OriginCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VMRuloList[0].WeavingLength)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VMRuloList[0].EntranceLength)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VMRuloList[0].ExitLength)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VMRuloList[0].ExitLengthMinusSamples)
            </th>
            <th>
                @*Shrinkage manual from finishing*@
                @Html.DisplayNameFor(model => model.VMRuloList[0].Shrinkage)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VMRuloList[0].MeterContraction)
            </th>
             <th>
                @Html.DisplayNameFor(model => model.VMRuloList[0].ContractionWeavingExitFinish)
            </th>
            <th>
                @*Guven Inspection Length*@
                @Html.DisplayNameFor(model => model.VMRuloList[0].InspectionLength)
            </th>
            <th>
                @*Guven Cutting Length - Total Sum From Batches*@
                @Html.DisplayNameFor(model => model.VMRuloList[0].InspectionCuttingLength)
            </th>

            <th></th> @*Eye icon*@
            <th>
                Test Result
            </th>
            <th>
                @*Date Test Result*@
                @Html.DisplayNameFor(model => model.VMRuloList[0].DateTestResult)
            </th>
            <th>
                @*Guven Batch number*@
                @Html.DisplayNameFor(model => model.VMRuloList[0].BatchNumbers)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.VMRuloList)
        {
            var color = "bgcolor=transparent";
            if (!string.IsNullOrWhiteSpace(item.BatchNumbers))
                color = "bgcolor=ffc300"; //Amarillo
            else if (item.CanContinueValue)
                color = "bgcolor=66ff66"; //Verde
            else if (item.TestCategoryCode.Contains(" X", StringComparison.InvariantCultureIgnoreCase)) //Ok X or Fail X
                color = "bgcolor=ff6666"; //Rojo

        <tr @color id="@("row" + @item.RuloID)">
            <td>
                 <span style="font-weight:bold">
                    @Html.DisplayFor(modelItem => item.RuloID)
                </span>
            </td>


            <td>

                <div style="display:block;width:120px;">
                    @if (item.SentAuthorizerID == null && item.FolioNumber == 0)
                    {
                    @if (User.IsInRole("Rulo", AuthType.Update))
                        {
                    <a onclick="showFolioNumber(@item.RuloID)" class="btn input-xs btn-success" data-backdrop="static" data-keyboard="false" href="#" data-toggle="modal" data-target="#modalDialogGeneral">
                        <i class="lni lni-arrow-right-circle"></i>
                    </a>

                    @Html.Raw(" | ")
                        }
                    }
                    else
                    {
                    @if (User.IsInRole("Authorize", AuthType.Full))
                        {
                    @if (item.SentAuthorizerID == null)
                            {
                    <a onclick="authorizeRulo(@item.RuloID)" class="btn input-xs btn-danger">
                        <i class="lni lni-checkmark-circle"></i>
                    </a>

                    @Html.Raw(" | ")
                            }

                        }
                    }

                    @*@if (User.IsInRole("Authorize", AuthType.Show))
                        {
                            if (item.SentAuthorizerID == null && item.FolioNumber == 0)
                            {
                                @Html.Raw(" | ")
                            }
                        }*@

                    @if (User.IsInRole("Piece", AuthType.Show))
                    {
                    <a onclick="showPieces(@item.RuloID)" alt="Pieces" class="btn input-xs btn-secondary" data-backdrop="static" data-keyboard="false" href="#" data-toggle="modal" data-target="#modalDialogPieces">
                        <i alt="Pieces" class="lni lni-slice"></i>
                    </a>
                    }

                    @if (User.IsInRole("Authorize", AuthType.Show) || User.IsInRole("Piece", AuthType.Show))
                    {
                        if (item.TestResultID == null)
                    @Html.Raw(" | ")
                        }

                    @if (User.IsInRole("RuloProcessShow") || User.IsInRole("AdminFull") || User.IsInRole("RuloProcessFull"))
                    {
                        if (item.TestResultID == null) //If test result is null show button processes
                        {
                    <a asp-controller="RuloProcess" asp-action="Index" asp-route-ruloid="@item.RuloID" class="btn input-xs btn-info">
                        <i class="lni lni-list "></i>
                    </a>
                        }
                    }

                    @if (User.IsInRole("Authorize", AuthType.Show) || User.IsInRole("Piece", AuthType.Show) || User.IsInRole("RuloProcess", AuthType.Show))


                    @if (User.IsInRole("TestResult", AuthType.Add))
                        {
                            if (item.SentAuthorizerID != null)
                            {
                    @if (item.TestResultID == null || item.TestResultID == 0 || item.IsWaitingAnswerFromTestValue)
                                {
                    @Html.Raw(" | ")
                    @*<a onclick="testResultValidateInfo(@item.RuloID)" class="btn  input-xs btn-dark"><i class="fa fa-vial"></i></a>*@
                    <a onclick="testResult(@item.RuloID)" class="btn  input-xs btn-dark" data-toggle="modal" data-target="#modalDialog"><i class="lni lni-flag"></i></a>
                                }
                            }
                        }


                </div>

            </td>

            <td>
                <div style="display:block;width:170px;">
                    @if (User.IsInRole("Rulo", AuthType.Update))
                        {
                    <a asp-controller="Rulo" asp-action="Edit" asp-route-ruloid="@item.RuloID">
                        <i class="lni lni-slice"></i>
                    </a>
                        }

                    @if (User.IsInRole("Rulo", AuthType.Show))
                        {
                            if (User.IsInRole("Rulo", AuthType.Update))
                    @Html.Raw(" | ")

                    <a asp-controller="Rulo" asp-action="Details" asp-route-ruloid="@item.RuloID">
                        <i class="lni lni-question-circle"></i>
                    </a>
                            }

                    @if (User.IsInRole("Rulo", AuthType.Delete))
                        {
                            if (item.TestResultID == null) //If test result is null show button processes
                            {
                                if (User.IsInRole("Rulo", AuthType.Update) || User.IsInRole("Rulo", AuthType.Show))
                    @Html.Raw(" | ")
                    <a asp-controller="Rulo" asp-action="Delete" asp-route-ruloid="@item.RuloID">
                        <i class="lni lni-circle-minus"></i>
                    </a>
                                }
                            }
                    @if (User.IsInRole("Rulo", AuthType.Show))
                        {
                            if (User.IsInRole("Rulo", AuthType.Update) || User.IsInRole("Rulo", AuthType.Show) || User.IsInRole("Rulo", AuthType.Delete))
                    @Html.Raw(" | ")

                    <a alt="Processes" onclick="showProcesses(@item.RuloID);" href="#" data-toggle="modal" data-target="#modalDialogprocesses">
                        <i class="lni lni-direction-alt"></i>
                    </a>
                    @Html.Raw(" | ")

                    <a href="#" onclick="printLabel(@item.RuloID)" data-toggle="modal" data-target="#modalDialogGeneral"><i class="lni lni-printer"></i></a>

                    @Html.Raw(" | ");

                    @*<a onclick="showPerfomanceTestResult(@item.RuloID)" data-toggle="modal" href="#" data-target="#modalDialogGeneral"><i class="fa fa-vials"></i></a>*@
                    <a onclick="showPerfomanceTestResult(@item.RuloID)" data-toggle="modal" href="#" data-target="#modalDialogPerformanceTestResult"><i class="fa fa-vials"></i></a>
                            }
                </div>

            </td>


            <td>
                <div style="display:block;width:170px;">

                    @Html.DisplayFor(modelItem => item.Lote)
                    -
                    @Html.DisplayFor(modelItem => item.Beam)@Html.DisplayFor(modelItem => item.BeamStop)
                    -
                    @Html.DisplayFor(modelItem => item.Loom)@Html.Raw(item.IsToyotaValue ? "T" : "")
                </div>
            </td>
            <td>
                <div style="display:block;width:95px;">
                    @Html.DisplayFor(modelItem => item.Style)
                </div>
            </td>
            <td>
                <div style="display:block;width:260px;">
                    @Html.DisplayFor(modelItem => item.StyleName)
                </div>
            </td>
            <td>
                <div style="display:block;width:100;">
                    @Html.DisplayFor(modelItem => item.Machine)
                </div>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MainOriginCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OriginCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.WeavingLength)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EntranceLength)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ExitLength)
            </td>
            <td>
                @Html.DisplayFor(model => item.ExitLengthMinusSamples)
            </td>
            <td>
                @if (item.Shrinkage <= 0)
                {
                     @if (User.IsInRole("Rulo", AuthType.Update))
                     {
                        <a onclick="showShrinkage(@item.RuloID)" class="btn input-xs btn-dark" data-toggle="modal" data-target="#modalDialogGeneral"><i class="lni lni-arrows-horizontal"></i></a>
                     }
                }
                else
                {
                    @Html.DisplayFor(model => item.Shrinkage)
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MeterContraction)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ContractionWeavingExitFinish)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.InspectionLength)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.InspectionCuttingLength)
            </td>


            <td>
                @if (!string.IsNullOrEmpty(item.TestCategoryCode))
                    {
                <a alt="Test Result" onclick="showTestResultObservations(@item.RuloID);" href="#" data-toggle="modal" data-target="#modalDialogGeneral">
                    <i class="lni lni-eye"></i>
                </a>
                    }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TestCategoryCode)
            </td>
            <td>
                @*Date test result*@
                <div style="display:block;width:130px;">
                    @Html.Raw(item.DateTestResult?.ToString("yyyy-MM-dd HH:mm"))
                </div>
            </td>
            <td>
                @*Batch number*@
                @Html.DisplayFor(modelItem => item.BatchNumbers)
            </td>

        </tr>
            }
    </tbody>
</table>

@{
    var prevDisabled = !Model.VMRuloList.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.VMRuloList.HasNextPage ? "disabled" : "";
}

<div>
    <a asp-action="Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="1"
       asp-route-currentFilter="@System.Text.Json.JsonSerializer.Serialize(Model.CurrentVMRuloFilters)"
       class="btn btn-primary btn-sm @prevDisabled">
        <i class="lni lni-backward"></i> First
    </a>
    <a asp-action="Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.VMRuloList.PageIndex - 1)"
       asp-route-currentFilter="@System.Text.Json.JsonSerializer.Serialize(Model.CurrentVMRuloFilters)"
       class="btn btn-primary btn-sm @prevDisabled">
        <i class="lni lni-chevron-left"></i> Previous
    </a>
    <a asp-action="Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.VMRuloList.PageIndex + 1)"
       asp-route-currentFilter="@System.Text.Json.JsonSerializer.Serialize(Model.CurrentVMRuloFilters)"
       class="btn btn-primary btn-sm @nextDisabled">
        Next <i class="lni lni-chevron-right "></i>
    </a>
    <a asp-action="Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.VMRuloList.TotalPages)"
       asp-route-currentFilter="@System.Text.Json.JsonSerializer.Serialize(Model.CurrentVMRuloFilters)"
       class="btn btn-primary btn-sm @nextDisabled">
        Last <i class="lni lni-forward"></i>
    </a>

    <span style="font-weight: bold">
        Pag.: @(Model.VMRuloList.PageIndex) of @(Model.VMRuloList.TotalPages)
    </span>
</div>
<!-- Modal -->
<div class="modal fade" id="modalDialog" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        @*modal-lg*@
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Test Result</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="objModal"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="Finish();">Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalDialogprocesses" tabindex="-1" role="dialog" width="350px" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Rulo Processes</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="processesDef"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@*Pieces*@
<div class="modal fade" id="modalDialogPieces" tabindex="-1" role="dialog" width="350px" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="align-content: center">
                <div id="piecesInfo"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="document.getElementById('piecesInfo').innerHTML = ''" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@*Dialog General*@
<div class="modal fade" id="modalDialogGeneral" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel"></h5>
                <button type="button" class="close" data-dismiss="modal" onclick="restoreDialog();" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="generalInfo"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="restoreDialog();" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@*Dialog Performance Test Result*@
<div class="modal fade" id="modalDialogPerformanceTestResult" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel"></h5>
                <button type="button" class="close" data-dismiss="modal" onclick="restoreDialog();" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="performanceTestResult"></div>
            </div>
            <div class="modal-footer">
                <a onclick="exportPerformanceTestResult();" class="btn btn-success"><i class="far fa-file-excel"></i> Export Test Result</a>
                <button type="button" class="btn btn-secondary" onclick="restoreDialog();" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@*info*@
<hr />

<h5><strong>Definitions</strong></h5>

<div class="btn-group  btn-group-sm" role="group">

    <button type="button" class="btn btn-sm btn-secondary"> <i alt="Pieces" class="lni lni-slice"></i> Pieces</button>
    <button type="button" class="btn btn-sm btn-danger"><i class="lni lni-checkmark-circle"></i> Authorize</button>
    <button type="button" class="btn btn-sm btn-success"><i class="lni lni-arrow-right-circle"></i> Send</button>
    <button type="button" class="btn btn-sm btn-info"><i class="lni lni-list "></i> Processes</button>
    <button type="button" class="btn btn-sm btn-dark"><i class="fa fa-vial"></i> Test Result</button>
</div>

<div class="loader" id="divLoader"></div>

@section scripts{
    <script>
        $(document).ready(function () {

        var position = '@positionRuloId';
        if (!isNaN(position) && position > 0) {
        var element = document.getElementById("row" + position);
        element.scrollIntoView({ block: "end", behavior: "smooth" });
        }

        });

        //$(document).ready(function () {
        //    $('#formFilters').submit(function (event) {
        //        // Evitar que el formulario se envíe de forma normal
        //        event.preventDefault();

        //        // Obtener la acción y el método del formulario
        //        var url = $(this).attr('action');
        //        var method = $(this).attr('method');

        //        // Obtener los datos del formulario
        //        var formData = $(this).serialize();

        //        // Enviar la solicitud Ajax
        //        $.ajax({
        //            url: url,
        //            method: method,
        //            data: formData,
        //            success: function (response) {
        //                // Manejar la respuesta del servidor
        //                $("#divLoader").hide();
        //                console.log(response);
        //            },
        //            error: function (xhr, status, error) {
        //                // Manejar el error de la solicitud
        //                $("#divLoader").hide();
        //                console.log(error);
        //            }
        //        });
        //    });
        //});
    </script>
}

<script>
    document.getElementById("dtBegin").value = '@ViewBag.dtBegin.ToString()';
    document.getElementById("dtEnd").value = '@ViewBag.dtEnd.ToString()';
    document.getElementById("isAccountingDate").value = '@ViewBag.isAccountingDate';

    var isAccountValue = '@ViewBag.isAccountingDate' == 'True' ? true : false;
    document.getElementById("RealDate").checked = !isAccountValue;
    document.getElementById("AccountingDate").checked = isAccountValue;

    document.getElementById("numLote").value = '@ViewBag.numLote';
    document.getElementById("numBeam").value = '@ViewBag.numBeam';
    document.getElementById("numLoom").value = '@ViewBag.numLoom';
    //document.getElementById("numPiece").value = '@ViewBag.numPiece';
    document.getElementById("txtStyle").value = '@ViewBag.txtStyle';
    document.getElementById("numTestCategory").value = '@ViewBag.numTestCategory';
    document.getElementById("numDefinitionProcess").value = '@ViewBag.numDefinitionProcess';
    document.getElementById("folioNumber").value = '@ViewBag.FolioNumber';
    document.getElementById("withBatches").value = '@ViewBag.withBatches';
    document.getElementById("chkWithBatchesTmp").value = '@ViewBag.withBatches';
    document.getElementById("numRuloID").value = '@ViewBag.numRuloID';

    function changeDate(option){
        if (option == 1)
        {
            document.getElementById("dtBegin").value = '@ViewBag.realBeginDate.ToString()';
            document.getElementById("dtEnd").value = '@ViewBag.realDate.ToString()';
            document.getElementById("isAccountingDate").value = false;
        }
        else if (option == 2)
        {
            document.getElementById("dtBegin").value = '@ViewBag.accountingBeginDate.ToString()';
            document.getElementById("dtEnd").value = '@ViewBag.accountingDate.ToString()';
            document.getElementById("isAccountingDate").value = true;
        }
    }

    function chageWithBatches()
    {
        var selectedValue = document.getElementById("chkWithBatchesTmp");
        document.getElementById("withBatches").value = selectedValue.checked == true ? true : false;
    }

    function authorizeRulo(ruloId) {
        if (confirm('Are you sure you want to authorize this rulo?')) {
            $.ajax({
                url: "/Rulo/AuthorizeRulo",
                type: "POST",
                data:
                {
                    RuloId: ruloId,
                },
                success: function (data) {
                    location.reload();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("404 Not found!");
                }
            });
        }
    }

    function showFolioNumber(ruloId) {
            $.ajax({
                url: "/Rulo/GetFolioNumber",
                type: "GET",
                data:
                {
                    RuloId: ruloId
                },
                success: function (data) {
                    document.getElementById('generalInfo').innerHTML = data;
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("404 Not found!");
                }
            });
    }

    function saveFolioNumber(ruloId) {
        var shift = $("#Shift").val();
        var folioNumber = $("#FolioNumber").val();

        $.ajax({
            url: "/Rulo/SaveFolioNumber",
            type: "POST",
            data:
            {
                RuloId: ruloId,
                Shift: shift,
                FolioNumber: folioNumber,
            },
            success: function (data) {
                if (data == '') {
                    location.reload();
                }
                else {
                    document.getElementById('generalInfo').innerHTML = data;
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("404 Not found!");
            }
        });
    }

    function testResultValidateInfo(ruloId) {
        $.ajax({
            url: "/Rulo/TestResultValidateInfo",
            type: "GET",
            data:
            {
                RuloId: ruloId,
            },
            success: function (data) {
                if (data.errorMessage != '') {
                    alert(data.errorMessage);
                }
                else {
                    $('#modalDialog').modal('show'); /*modalDialog*/
                    //$("#modalDialog").modal({
                    //    show: true,
                    //    data-target: 'bd-example-modal-lg'
                    //});
                    //testResult(ruloId, data.performanceId);
                    showTestResultWithPerformance(ruloId, data.performanceId);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("404 Not found!");
            }
        });
    }

    function showTestResultObservations(ruloId) {
        $.ajax({
            url: "/Rulo/GetTestResultObservations",
            type: "GET",
            data:
            {
                RuloId: ruloId,
            },
            success: function (data) {
                html = "<label for='ddlTestResultsDescription'>Observations:</label>"
                html += "<textarea id='ddlTestResultsDescription' name='ddlTestResultsDescription' rows='4' cols='50' disabled>" + data.details + "</textarea>"

                document.getElementById('generalInfo').innerHTML = html;
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("404 Not found!");
            }
        });
    }

    function testResult(ruloId, performanceId) {

        var testCategory = @Html.Raw(ViewBag.ModalTestResultList);

        if (performanceId == 0)
            performanceId = "No tests";

        //var sel = "<h5>Performance Test Result ID: " + performanceId + "</h5>";
        var sel = "Test #: ";
        sel += "<input style='width: 100 % !important;' type='number' id='performanceId' name='performanceId' /> <hr/>";

        sel += "Result: <Select id='ddlTestResults'>";

        $.each(testCategory, function (index, value) {
            sel += "<option value='" + value.Value + "'>" + value.Text + "</option>";
            console.log('The value at arr[' + value.Value + '] is: ' + value.Text);
        })

        sel += "</select>";

        sel += "<br/><label for='ddlTestResultsDescription'>Observations:</label>"
        sel += "<textarea id='ddlTestResultsDescription' name='ddlTestResultsDescription' rows='4' cols='50'></textarea>"

        sel += "<input type=hidden id='ruloId' name='ruloId' value = " + ruloId + "></input>";

        document.getElementById('objModal').innerHTML = sel;
    }

    function printLabel(ruloId) {
        var html

        $.ajax({
            url: "/Rulo/GetPieces",
            type: "POST",
            data:
            {
                RuloId: ruloId,
            },
            success: function (data) {
                if (data) {
                    if (!data.errorMessage) {
                        html = "Select piece number to print on the label: <Select id='ddlPieces'>";
                        $.each(data.pieces, function (index, value) {
                            html += "<option value='" + value.value + "'>" + value.text + "</option>";
                            console.log('The value at arr[' + value.Value + '] is: ' + value.Text);
                        })
                        html += "</select>";

                        html += '<br/><br/><a onclick="printLabelConfirm(\'gd1\')" class="btn btn-primary" role="button" data-backdrop="static" data-keyboard="false" href="#" data-target="#modalDialogGeneral">Printer GD1</a> | '
                        html += '<a onclick="printLabelConfirm(\'gd2\')" class="btn btn-success" role="button" data-backdrop="static" data-keyboard="false" href="#" data-target="#modalDialogGeneral">Printer GD2</a>'
                        html += "<input type=hidden id='ruloIdPrint' name='ruloIdPrint' value = " + ruloId + "></input>";

                        document.getElementById('modalDialogGeneral').classList.add('text-center');

                        document.getElementById('generalInfo').innerHTML = html;
                    }

                    else {
                        alert(data.errorMessage);
                    }

                    //alert("Listo!");
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("404 Not found!");
            }
        });


    }

    function printLabelConfirm(floor) {
        var pieceId = $("#ddlPieces :selected").val();
        if (isNaN(pieceId) || pieceId <= 0) {
            return alert("Piece number no valid!");
        }

        if (confirm('Are you sure you want to print this label?')) {
            var ruloId = $("#ruloIdPrint").val();

            $.ajax({
                url: "/Rulo/Print",
                type: "POST",
                data:
                {
                    RuloId: ruloId,
                    Floor: floor,
                    PieceId: pieceId
                },
                success: function (data) {
                    if (data) {
                        if (data.errorMessage)
                            alert(data.errorMessage);
                        else
                            alert("Listo!");
                    }
                    else
                        alert("Listo!");
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("404 Not found!");
                }
            });
        }


    }

    function restoreDialog() {
        document.getElementById('modalDialogGeneral').classList.remove('text-center');
        document.getElementById('generalInfo').innerHTML = '';
    }

    function controlForSmallerThanZero(controlID) {
        try {
            var value = document.getElementById(controlID).value;
            var a = parseInt(value);
            if (!(a > 0)) document.getElementById(controlID).value = "0";
        }
        catch (err) {
            document.getElementById(controlID).value = "0";
        }
    }

    function Finish() {
        var description = $("#ddlTestResults :selected").text();
        var performanceId = $("#performanceId").val();

        if (isNaN(performanceId)) {
            alert("Performance ID no valid!");
            return;
        }

        if (performanceId == 0) {
            alert("Performance ID no valid!");
            return;
        }

        if (description == 'All') {
            alert('Please select an option');
            return;
        }

        if (confirm('Are you sure you want to finish this Test Result')) {
            TestResultFinish();
        }
    }

    function TestResultFinish() {

        var ruloId = $("#ruloId").val();
        var testCategoryId = $("#ddlTestResults :selected").val();
        var testCategoryText = $("#ddlTestResults :selected").text();
        var description = $("#ddlTestResultsDescription").val();
        var performanceId = $("#performanceId").val();

        $.ajax({
            url: "/Rulo/TestResultFinish",
            type: "POST",
            data:
            {
                RuloId: ruloId,
                TestCategoryId: testCategoryId,
                TestCategoryText: testCategoryText,
                Description: description,
                PerformanceId: performanceId
            },
            success: function (data) {
                location.reload();
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("404 Not found!");
            }
        });
    }

    function showPieces(ruloId) {
        $.ajax({
            url: "/Rulo/GetPieceIndex",
            type: "GET",
            data:
            {
                RuloId: ruloId
            },
            success: function (data) {
                document.getElementById('piecesInfo').innerHTML = data;

            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("Something went wrong!");
            }
        });
    }

    function createOrUpdatePiece(ruloId, pieceId) {
        $.ajax({
            url: "/Rulo/GetCreateOrUpdatePiece",
            type: "GET",
            data:
            {
                RuloId: ruloId,
                PieceId: pieceId
            },
            success: function (data) {
                document.getElementById('piecesInfo').innerHTML = data;

            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("Something went wrong!");
            }
        });
    }

    function savePiece(ruloId, pieceId) {
        var pieceNo = document.getElementById("pieceNo").value
        var meter = document.getElementById("meter").value

        $.ajax({
            url: "/Rulo/SavePiece",
            type: "GET",
            data:
            {
                RuloId: ruloId,
                PieceId: pieceId,
                PieceNo: pieceNo,
                Meter: meter
            },
            success: function (data) {
                document.getElementById('piecesInfo').innerHTML = data;

            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("Something went wrong!");
            }
        });
    }

    function deleteConfirmedPiece(pieceId) {

        $.ajax({
            url: "/Rulo/DeleteConfirmedPiece",
            type: "GET",
            data:
            {
                PieceId: pieceId,
            },
            success: function (data) {
                document.getElementById('piecesInfo').innerHTML = data;

            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("Something went wrong!");
            }
        });
    }

    function detailsPiece(pieceId) {
        $.ajax({
            url: "/Rulo/GetDetailsPiece",
            type: "GET",
            data:
            {
                PieceId: pieceId
            },
            success: function (data) {
                document.getElementById('piecesInfo').innerHTML = data;

            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("Something went wrong!");
            }
        });
    }

    function deletePiece(pieceId) {
        $.ajax({
            url: "/Rulo/GetDeletePiece",
            type: "GET",
            data:
            {
                PieceId: pieceId
            },
            success: function (data) {
                document.getElementById('piecesInfo').innerHTML = data;

            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("Something went wrong!");
            }
        });
    }

    function showProcesses(RuloID) {

        $.ajax({
            url: "/Rulo/GetProcesses",
            type: "GET",
            data:
            {
                RuloId: RuloID
            },
            success: function (data) {
                document.getElementById('processesDef').innerHTML = data;

            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("Something went wrong!");
            }
        });

    }

    function setIndex() {
        document.getElementById("formFilters").action = "/Rulo/Index";
        document.getElementById("formFilters").submit();
    }

    function exportToWarehouseStock(){
        $("#divLoader").show();

        // Enviar la solicitud Ajax
        $.ajax({
            url: 'Rulo/ExportToWarehouseStock',
            method: 'POST',
            processData: false,
            xhrFields: {
              responseType: 'blob'
            },
            data: $('#formFilters').serialize(),
            success: function (response, status, xhr) {
            // Manejar la respuesta del servidor
                $("#divLoader").hide();
                var fileName = xhr.getResponseHeader('Content-Disposition').match(/filename="(.+)"/)[1];
                var url = URL.createObjectURL(response);
                var a = document.createElement("a");
                a.href = url;
                a.download = fileName;
                a.click();
            },
            error: function(xhr, status, error) {
            // Manejar el error de la solicitud
            $("#divLoader").hide();
                alert("Something went wrong!");
            }
        });
    }

    function exportToExcel() {

        document.getElementById("formFilters").action = "/Rulo/ExportToExcel";

@*      var withBatches = document.getElementById("chkWithBatchesTmp");

        if (withBatches.checked == true)
            document.getElementById("withBatches").value = true
        else
            document.getElementById("withBatches").value = false*@

        // Obtener los datos del formulario
        var formData = $(this).serialize();

        $("#divLoader").show();
        // Enviar la solicitud Ajax
        $.ajax({
            url: $('#formFilters').attr('action'),
            method: 'POST',
            processData: false,
            xhrFields: {
              responseType: 'blob'
            },
            data: $('#formFilters').serialize(),
            success: function (response, status, xhr) {
            // Manejar la respuesta del servidor
                $("#divLoader").hide();
                var fileName = xhr.getResponseHeader('Content-Disposition').match(/filename="(.+)"/)[1];
                var url = URL.createObjectURL(response);
                var a = document.createElement("a");
                a.href = url;
                a.download = fileName;
                a.click();
            },
            error: function(xhr, status, error) {
            // Manejar el error de la solicitud
            $("#divLoader").hide();
                alert("Something went wrong!");
            }
        });

    }

    function clearFilters() {
        document.getElementById("numLote").value = 0;
        document.getElementById("numBeam").value = 0;
        document.getElementById("numLoom").value = 0;
        //document.getElementById("numPiece").value = 0;
        document.getElementById("txtStyle").value = '';
        document.getElementById("numTestCategory").value = 0;
        document.getElementById("numDefinitionProcess").value = 0;
        document.getElementById("folioNumber").value = 0;
        document.getElementById("numRuloID").value = 0;

        document.getElementById("formFilters").action = "/Rulo/Index";
        document.getElementById("formFilters").submit();
    }

    function exportToExcelAllStock() {

        document.getElementById("formFilters").action = "/Rulo/ExportToExcelAllStock";
        document.getElementById("formFilters").submit();
    }

    function exportToExcelPerformanceTestReport() {
        document.getElementById("formFilters").action = "/Rulo/ExportToExcelPerformanceTestReport";
        document.getElementById("formFilters").submit();
    }

    function setTitle(ruloId, role) {
        if (role == 1) {

            $.ajax({
                url: "/Rulo/GetInfoTitle",
                type: "GET",
                data:
                {
                    RuloId: ruloId
                },
                success: function (data) {
                    if (data) {
                        document.getElementById('titleRulos').innerText = " (" + data.title + ")";
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("Something went wrong!");
                }
            })

        }
    }

    function showPerfomanceTestResult(ruloId) {
        document.getElementById("ruloIdPerformance").value = ruloId;

        $.ajax({
            url: "/Rulo/GetPerformanceTestResult",
            type: "Get",
            data: {
                ruloId: ruloId,
            },
            success: function (data) {
                document.getElementById('performanceTestResult').innerHTML = data;
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("Something went wrong!");
            }
        });
    }

    function exportPerformanceTestResult(ruloId) {
        document.getElementById("form2").method = "post";
        document.getElementById("form2").action = "/Rulo/ExportPerformanceTestResult";
        document.getElementById("form2").submit();
    }

    function showTestResultWithPerformance(ruloId, performanceId) {
        $.ajax({
            url: "/Rulo/GetTestResultWithPerformance",
            type: "Get",
            data: {
                ruloId: ruloId,
                performanceId: performanceId
            },
            success: function (data) {
                //document.getElementById('generalInfo').innerHTML = data;
                document.getElementById('objModal').innerHTML = data;
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("Something went wrong!");
            }
        });
    }

    function GetPerformance() {
        var performanceId = $("#performanceId").val();

        if (isNaN(performanceId)) {
            alert("Number is not valid!");
            return;
        }

        $.ajax({
            url: "/Rulo/GetPerformanceTestResult",
            type: "Get",
            data: {
                ruloId: ruloId,
                performanceId: performanceId
            },
            success: function (data) {
                document.getElementById('generalInfo').innerHTML = data;
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("Something went wrong!");
            }
        });
    }

    function validateCreateRulo() {
        $.ajax({
            url: "/Rulo/ValidateCreateRulo",
            type: "GET",
            data: {
            },
            success: function (data) {
                if (data) {
                    if (data.errorMessage == "") {
                        location.href = "/Rulo/Create";
                    }
                    else
                        alert(data.errorMessage);
                }
                else
                    alert("Something went wrong!")
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("404 Not found!");
            }
        });
    }

    function showShrinkage(ruloId) {
        $.ajax({
            url: "/Rulo/GetShrinkage",
            type: "GET",
            data:
            {
                RuloId: ruloId
            },
            success: function (data) {
                document.getElementById('generalInfo').innerHTML = data;
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("404 Not found!");
            }
        });
    }

    function saveShrinkage(ruloId) {
        var shrinkage = $("#Shrinkage").val();

        $.ajax({
            url: "/Rulo/SaveShrinkage",
            type: "POST",
            data:
            {
                RuloId: ruloId,
                Shrinkage: shrinkage,
            },
            success: function (data) {
                if (data == '') {
                    location.reload();
                }
                else {
                    document.getElementById('generalInfo').innerHTML = data;
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert("404 Not found!");
            }
        });
    }

</script>